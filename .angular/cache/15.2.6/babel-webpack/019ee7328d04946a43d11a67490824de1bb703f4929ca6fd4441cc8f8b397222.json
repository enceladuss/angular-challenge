{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../simple-table/simple-table.component\";\nexport let SortTableComponent = /*#__PURE__*/(() => {\n  class SortTableComponent {\n    constructor() {\n      this.tableData = [{\n        first: 'Dylan',\n        last: 'Israel',\n        age: 34,\n        date: '10/25/1987',\n        renting: false\n      }, {\n        first: 'Sergei',\n        last: 'Fubar',\n        age: 25,\n        date: '11/14/1996',\n        renting: false\n      }, {\n        first: 'Vlad',\n        last: 'Money',\n        age: 24,\n        date: '01/15/1996',\n        renting: true\n      }, {\n        first: 'Oleg',\n        last: 'Brovar',\n        age: 24,\n        date: '05/23/1997',\n        renting: true\n      }, {\n        first: 'Eduard',\n        last: 'Shpil',\n        age: 28,\n        date: '07/07/1993',\n        renting: false\n      }];\n      this.sortDirection = true;\n    }\n    sort(headerData) {\n      const {\n        key,\n        value\n      } = headerData;\n      this.sortDirection = !this.sortDirection;\n      if (typeof value === 'boolean') {\n        this.sortBoolean(key);\n      } else if (typeof value === 'number') {\n        this.sortNum(key);\n      } else if (this.isDate(value)) {\n        this.sortDate(key);\n      } else if (typeof value === 'string') {\n        this.sortString(key);\n      }\n    }\n    isDate(value) {\n      const parsedDate = Date.parse(value);\n      return isNaN(value) && !isNaN(parsedDate);\n    }\n    sortDate(key) {\n      this.tableData.sort((a, b) => {\n        if (this.sortDirection) {\n          return new Date(a[key]).getTime() - new Date(b[key]).getTime();\n        } else {\n          return new Date(b[key]).getTime() - new Date(a[key]).getTime();\n        }\n      });\n    }\n    sortBoolean(key) {\n      this.tableData.sort((a, b) => this.sortDirection ? Number(a[key]) - Number(b[key]) : Number(b[key]) - Number(a[key]));\n    }\n    sortNum(key) {\n      this.tableData.sort((a, b) => this.sortDirection ? Number(a[key]) - Number(b[key]) : Number(b[key]) - Number(a[key]));\n    }\n    sortString(key) {\n      this.tableData.sort((a, b) => {\n        const valA = a[key].toLowerCase();\n        const valB = b[key].toLowerCase();\n        if (this.sortDirection) {\n          if (valA > valB) {\n            return -1;\n          }\n          if (valB > valA) {\n            return 1;\n          }\n          return 0;\n        } else {\n          if (valB > valA) {\n            return -1;\n          }\n          if (valA > valB) {\n            return 1;\n          }\n          return 0;\n        }\n      });\n    }\n  }\n  SortTableComponent.ɵfac = function SortTableComponent_Factory(t) {\n    return new (t || SortTableComponent)();\n  };\n  SortTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SortTableComponent,\n    selectors: [[\"app-sort-table\"]],\n    inputs: {\n      tableData: \"tableData\"\n    },\n    decls: 1,\n    vars: 2,\n    consts: [[3, \"tableData\", \"enabledSorting\", \"headerSelected\"]],\n    template: function SortTableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-simple-table\", 0);\n        i0.ɵɵlistener(\"headerSelected\", function SortTableComponent_Template_app_simple_table_headerSelected_0_listener($event) {\n          return ctx.sort($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"tableData\", ctx.tableData)(\"enabledSorting\", true);\n      }\n    },\n    dependencies: [i1.SimpleTableComponent]\n  });\n  return SortTableComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}